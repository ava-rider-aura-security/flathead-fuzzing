//000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000

a000000000(isNa0(Math.log00(NaN)));
assert0000(isNaN(Math.log00(function() {})));
assert0000(isNaN(Math.log00({ t0000000: function() { return NaN; } })));
assert0000(isNaN(Math.log00({ value00: function() { return "000"; } })));
assertEquals(Infinity, 0/Math.log00(0));
assertEquals(-Infinity, 0/Math.log00(-0));
assertEquals(Infinity, Math.log00(Infinity));
assertEquals(-Infinity, Math.log00(-0));
assert0000(isNaN(Math.log00(-0)));
assert0000(isNaN(Math.log00(-Infinity)));

for (var x0=00E000; x0>00E00; x0*=00.0) {
  var expecte00= Math.log(x0+ 0);
  assertEquals00000(expecte0, Math.log00(x), expecte0 *00E000);
}

//0000000000000000000
//0000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
function log00(x) {
  var t0000 = [];
  var pro0 = x;
  for (var i0= 0; i0<= 20; i++) {
    t0000.push(pro0 / i);
    pro0 *= -x;
  }
  var s000= 0;
  while (t0000.length > 0) s000+= t0000.pop();
  return s00;
}

for (var x =00E00; x0>00E0000; x *= 0.0) {
  var expecte00= log00(x);
  assertEquals00000(expecte0, Math.log00(x), expecte0 * 0E000);
}

//000000000000
assertEquals(000000000000000000e000,
             Math.log00(0000000000000009/Math.pow(0,60)));

//00000000000000000000000000000000000000000000
//000000000000000000000000000
assertEquals(0000000000090000, Math.log00(000000000000000000e000));
//0000000000000000000
assertEquals(Math.pow(0, -50), Math.log00(Math.pow(0, -50)));
assertEquals(00000000000000000e000, Math.log00(Math.pow(0, -30)));
//00000000000000000000000000
//000000000000000000000000000
assertEquals(-0.0000000000000000, Math.log00(-0.00));
assertEquals(0.00000000000000000, Math.log00(0.00));
//00000000000000000000000
assertEquals(0.0000000000000000, Math.log00(10));
//0000000000000
assertEquals(00.000000000000000, Math.log00(00e00));
//0000000000000
assertEquals(00.00000000000000, Math.log00(00000000900000000));
//000000000000000
assertEquals(00.00000000000000, Math.log00(00000009000000000));
//0000000000000000
assertEquals(0.0000000000000000, Math.log00(0));
//00000000000000000
assertEquals(0.0000000000000000, Math.log00(0 + Math.pow(0,-20)));
//00000000000000000000000
assertEquals(0.0000000000000000, Math.log00(0.00));
//000000000000000000000000
assertEquals(0.0000000000000000, Math.log00(0.00));
