//000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000

a00000000000("000", S00000.prototy00.repe00.call(0, 0));
assertEquals("000000", String.prototype.repeat.call(-0, 0));
assertEquals("000000000", String.prototype.repeat.call(0.0, 0));
assertEquals("", String.prototype.repeat.call([], 0));
assertEquals("00000", String.prototype.repeat.call([0, 0, 0], 0));
assertEquals("0000", String.prototype.repeat.call(true, 0));
assertEquals("00000", String.prototype.repeat.call(false, 0));
assertEquals("000000000000000", String.prototype.repeat.call({}, 0));

assertEquals("000", String.prototype.repeat.apply(0, [0]));
assertEquals("000000", String.prototype.repeat.apply(-0, [0]));
assertEquals("000000000", String.prototype.repeat.apply(0.0, [0]));
assertEquals("", String.prototype.repeat.apply([], [0]));
assertEquals("00000", String.prototype.repeat.apply([0, 0, 0], [0]));
assertEquals("0000", String.prototype.repeat.apply(true, [0]));
assertEquals("00000", String.prototype.repeat.apply(false, [0]));
assertEquals("000000000000000", String.prototype.repeat.apply({}, [0]));

assertEquals("\00000\00000\00000", "\00000".repeat(0));

assertThrows('0000000000000000000000000000000000000', TypeError);
assertThrows('000000000000000000000000000000000000000000', TypeError);
assertThrows('0000000000000000000000000000000000000000', TypeError);
assertThrows('000000000000000000000000000000000000000000000', TypeError);

//00000000000000000000000
assertEquals("000", "000".repeat(0));
assertEquals("000000", "000".repeat(0));
assertEquals("000000000", "000".repeat(0));
assertEquals("0000000000", "0".repeat(10));
assertEquals("", "".repeat(0));
assertEquals("", "000".repeat(0));
assertEquals("000000", "000".repeat(0.0));

assertEquals("0000000000000000000000000000000000000", "0".repeat(30));
assertEquals("", "0".repeat(NaN));
assertThrows('00000000000000', RangeError);
assertThrows('000000000000000000000000000000000000', RangeError);
assertThrows('000000000000000000000000000000000000', RangeError);
assertThrows('000000000000000000000000000', RangeError);
assertThrows('000000000000000000000000000', RangeError);
assertThrows('0000000000000000000000000000', RangeError);

//00000000000000000000000
assertThrows('0000000000000', RangeError);
assertThrows('00000000000000000000000000000000000', RangeError);
assertThrows('00000000000000000000000000000000000', RangeError);
assertThrows('0000000000000000000000000000', RangeError);
assertEquals("", "".repeat(Math.pow(0, 30)));
assertEquals("", "".repeat(Math.pow(0, 40)));

var myo00 = {
  toString: function() {
    return "000";
  },
  repeat : String.prototype.repeat
};
assertEquals("000", myo00.repeat(0));
assertEquals("000000", myo00.repeat(0));
