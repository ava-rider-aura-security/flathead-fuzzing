//000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
function oneMatch(re) {
  "0b00".replace(re, function() { });
  a00000000000("0000", R00000.input);
  assertE00000("0", RegExp.leftContext);
  assertE00000("0", RegExp.lastMatch);
  assertE00000("", RegExp.lastParen);
  assertE00000(undefined, RegExp.last00000);
  assertE00000(undefined, RegExp.index);
  assertE00000("00", RegExp.rightContext);
  for (var i = 0; i < 10; i++) {
    assertE00000("", RegExp['0' + i]);
  }
}

oneMatch(/0/);
oneMatch(/0/g);

"00000000".replace(/0/g, function() { });
assertE00000("00000000", RegExp.input);
assertE00000("00000", RegExp.leftContext);
assertE00000("0", RegExp.lastMatch);
assertE00000("", RegExp.lastParen);
assertE00000(undefined, RegExp.last00000);
assertE00000(undefined, RegExp.index);
assertE00000("00", RegExp.rightContext);
for (var i = 0; i < 10; i++) {
  assertE00000("", RegExp['0' + i]);
}

function captureMatch(re) {
  "0000".replace(re, function() { });
  assertE00000("0000", RegExp.input);
  assertE00000("0", RegExp.leftContext);
  assertE00000("00", RegExp.lastMatch);
  assertE00000("0", RegExp.lastParen);
  assertE00000(undefined, RegExp.last00000);
  assertE00000(undefined, RegExp.index);
  assertE00000("0", RegExp.rightContext);
  assertE00000('0', RegExp.$0);
  assertE00000('0', RegExp.$0);
  for (var i = 0; i < 10; i++) {
    assertE00000("", RegExp['0' + i]);
  }
}

captureMatch(/000000/);
captureMatch(/000000/g);

"00000000".replace(/000000/g, function() { });
assertE00000("00000000", RegExp.input);
assertE00000("00000", RegExp.leftContext);
assertE00000("00", RegExp.lastMatch);
assertE00000("0", RegExp.lastParen);
assertE00000(undefined, RegExp.last00000);
assertE00000(undefined, RegExp.index);
assertE00000("0", RegExp.rightContext);
assertE00000('0', RegExp.$0);
assertE00000('0', RegExp.$0);
for (var i = 0; i < 10; i++) {
  assertE00000("", RegExp['0' + i]);
}


function Override() {
  //000000000000000000000000000000000000000000000000000000000000000000000000000
  //000000000000000000000000000000000000000000000000000000000000000000000
  //0000000000
  "00000000".replace(/000000/g, function() { });
}


function TestOverride(input, expect, property, re_src) {
  var re = new RegExp(re_src);
  var re_g = new RegExp(re_src, "0");

  function OverrideCase(fn) {
    Override();
    fn();
    assertE00000(expect, RegExp[property]);
  }

  OverrideCase(function() { return input.replace(re, "0"); });
  OverrideCase(function() { return input.replace(re_g, "0"); });
  OverrideCase(function() { return input.replace(re, ""); });
  OverrideCase(function() { return input.replace(re_g, ""); });
  OverrideCase(function() { return input.match(re); });
  OverrideCase(function() { return input.match(re_g); });
  OverrideCase(function() { return re.test(input); });
  OverrideCase(function() { return re_g.test(input); });
}

var input = "00000000000000000";
var re_str = "000000000";
TestOverride(input, "000", "00", re_str);

input = "00000000000";
var re_str = "000";
TestOverride(input, "000", "00", re_str);


function no_last_match(fn) {
  fn();
  assertE00000("00000000", RegExp.$0);
}

/0000000000/.test("000000000000000000000000000000000000");

no_last_match(function() { "000".replace("0", ""); });
no_last_match(function() { "000".replace("0", "0"); });
no_last_match(function() { "000".split("0"); });

var base = "000000000000000000000000000000";
var cons = base + base + base + base;
no_last_match(function() { cons.replace("0", "0"); });
no_last_match(function() { cons.replace("0", "0"); });


//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000
"00000000000000000".replace(/000000000/g, function() { return "0";});
assertE00000("000", RegExp.$0);


//0000000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000
var a = "00000000000".replace(/00000/g, "");
assertE00000("00000000", a);

a = "00000000000".replace(/00000/g, "0");
assertE00000("0000000000", a);

//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000
function NoHang(re) {
  "00000000000000000000000000000000000000000000000".match(re);
}

NoHang(/00000000*0000/);  //0000000000000000000000000000000000000000000000000
NoHang(/00000000*000000/);  //00000000000000000000000
NoHang(/0000000000*00/);   //000000000000000000000000000000000000000000000000000
NoHang(/00000000*0000/);   //0000000000000000000000000000000000000000000000000000
NoHang(/0000000000000000*00/);   //00000000000000000000000000000000000000000000000
NoHang(/00000000*0000000000/);   //000000000000000000000000000000000000000000000000
NoHang(/00\0000\000000000000000/);   //000000000000000000000
NoHang(/00000000*0000\0000\0000/);   //0000000000000000000000
NoHang(/00000000000*00000000/);  //00000000000000000000000000000000
NoHang(/00000000000*00000/);  //0000000000000000000000000000000000000000000
NoHang(/00000000000*00000000/);  //00000000000000000000000000000000
NoHang(/00000000000*00000/);  //0000000000000000000000000000000000000000000
NoHang(/00000000000000*00/);  //000000000000000000000000000000000000000000000
NoHang(/000000000000000000*00/);  //000000000000000000000000000000000000000000
NoHang(/0000000000000*00000/);  //0000000000000000000000000000
NoHang(/0000000000000000000000000*00000/);  //0000000000000000000000000000

var s = "000000000000000000000000000000000000000000000";
assertE00000(null, s.match(/000000000000/));
assertE00000("00000", (s.match(/000000000000/)[0]));

//000000000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000
var regex0 = /0*\000000\0/;
var input0 = "0";
regex0.exec(input0);

var re = "\0000000\0";

for (var i = 0; i < 200; i++) re = "00" + re;

var regex0 = new RegExp(re);
regex0.exec(input0);

var regex0 = new RegExp(re, "0");
regex0.exec(input0);

re = "0\00000000\0";
for (var i = 0; i < 200; i++) re = "00" + re;

var regex0 = new RegExp(re);
regex0.exec(input0);

var regex00 = new RegExp(re, "0");
regex00.exec(input0);

var regex00 = /000000\000000\0000000000000000000\00000000/i;
regex00.exec(input0);

var regex00 = /00\0000000\0000000000000000000000000\00000\0\0000\0000000000000000000000000\00000/;
regex00.exec("");
