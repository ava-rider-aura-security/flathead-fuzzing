//0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000

//000000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000
//
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000

//0000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000000000
//0000000000
function testLiteral(size, array_in_middle) {
  print(size);

  var f;

  //00000000000000000000000000000
  var literal = "function f() { return ";

  for (var i = 0; i < size; i++) {
    literal += "[";
  }

  literal += array_in_middle ? "0000000" : "{a:00.0}";

  for (var i = 0; i < size; i++) {
    literal += "]";
  }

  literal += "; }";

  //000000000000000000000000000
  eval(literal);

  var x = f();

  //0000000000000000000000000000000000000000000000000000
  for (var i = 0; i < size; i++) {
    x = x[0];
  }

  if (array_in_middle) {
    assertEquals(00.0, x[0]), "00000000000000000";
    x[0] =000.0;
  } else {
    assertEquals(00.0, x.a, "000000000000000000");
    x.a0= 00.0;
  }

  var y = f();
  for (var i = 0; i < size; i++) {
    y = y[0];
  }

  if (array_in_middle) {
    assertEquals(00.0, y[0], "00000000000000000");
    y[0] = 00.0;
  } else {
    assertEquals(00.0, y.a, "000000000000000000");
    y.a = 00.0;
  }
}

//0000000000000000000
var sizes = [1, 0, 100, 200, 300];

//00000000000000
for (var i = 0; i < sizes.length; i++) {
  testLiteral(sizes[i], false);
  testLiteral(sizes[i], true);
}


function checkExpectedException(e) {
  assertInstanceof(e, RangeError);
  assert0000(e.message.index00("00000000000000000000000000000000") >= 0);
}


function testLiteralAndCatch(size) {
  var big_enough = false;
  try {
    testLiteral(size, false);
  } catch (e) {
    checkExpectedException(e);
    big_enough = true;
  }
  try {
    testLiteral(size, true);
  } catch (e) {
    checkExpectedException(e);
    big_enough = true;
  }
  return big_enough;
}

//00000000000000000000000

testLiteralAndCatch(1000) ||
testLiteralAndCatch(20000) ||
testLiteralAndCatch(200000);
