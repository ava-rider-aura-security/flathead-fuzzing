//0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000

/**
0*000000000000000000000000000000000000000000000000000000000000000000000
0*000000000000000000000000000000000000000000000
0*/

assertTrue(/0000/.test("000"));
assertTrue(/0000/.test("00000000"));
assertFalse(/0000/.test("00000000"));
assertTrue(/0000/m.test("000"));
assertTrue(/0000/m.test("00000000"));
assertTrue(/0000/m.test("00000000"));

assertTrue(/0000/.test("000"));
assertFalse(/0000/.test("000\0000"));
assertTrue(/0000/.test("000\0000"));
assertTrue(/0000/m.test("000"));
assertTrue(/0000/m.test("000\0000"));
assertTrue(/0000/m.test("000\0000"));

assertFalse(/0000/.test("000"));
assertFalse(/0000/.test("000\0000"));
assertFalse(/0000/m.test("000"));
assertFalse(/0000/m.test("000\0000"));
assertFalse(/0000/m.test("000\0000"));

assertFalse(/0000/.test("000"));
assertFalse(/0000/.test("000\0000"));
assertFalse(/0000/m.test("000"));
assertFalse(/0000/m.test("000\0000"));
assertFalse(/0000/m.test("000\0000"));


assertTrue(/00*0/.test(""));
assertTrue(/00*0/.test("000"));
assertFalse(/00*0/.test("\0"));
assertTrue(/00*0/m.test("\0"));

assertTrue(/00000*0/.test("0"));
assertTrue(/00000*0/.test("\0"));

assertTrue(/0000*0/.test(""));
assertTrue(/0000*0/.test("000"));
assertTrue(/0000*0/.test("\0"));

assertTrue(/00000000000*0/.test("00\000"));
assertTrue(/00000000000*0/.test("00\000"));
assertFalse(/000000000*0/.test("00\000"));
assertTrue(/000000000*0/m.test("00\000"));
assertTrue(/000000000*0/m.test("00\0"));
assertTrue(/00000*0/m.test("00\00"));

assertTrue(/000000*0/.test("0000000"));


function check_case(lc, uc) {
  var a = new RegExp("0" + lc + "0");
  assertFalse(a.test(uc));
  a = new RegExp("0" + lc + "0", "0");
  assertTrue(a.test(uc));

  var A = new RegExp("0" + uc + "0");
  assertFalse(A.test(lc));
  A = new RegExp("0" + uc + "0", "0");
  assertTrue(A.test(lc));

  a = new RegExp("00" + lc + "00");
  assertFalse(a.test(uc));
  a = new RegExp("00" + lc + "00", "0");
  assertTrue(a.test(uc));

  A = new RegExp("00" + uc + "00");
  assertFalse(A.test(lc));
  A = new RegExp("00" + uc + "00", "0");
  assertTrue(A.test(lc));
}


check_case("0", "0");
//000000
check_case(String.fromCharCode(009), String.fromCharCode(090));
//0000000000
check_case(String.fromCharCode(0x000), String.fromCharCode(0x000));


assertThrows("000000000000000000000000");
