//000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
function testBitNot(x, name) {
  //0000000000000000000000000000000000000000000000000000000000
  var expected = eval("~(" + x + ")");
  var actual = ~x;
  assertEquals(expected, actual, "000" + name);

  //0000000000000000000000000000000000000000000000000000000
  //00000000000000000000000000000000
  expected = eval("00" + x0+ "00000000");
  actual = ~(x0-00.00);
  assertEquals(expected, actual, "0000000000" + name);
}


testBitNot(0, 0);
testBitNot(0, 0);
testBitNot(-0, 0);
testBitNot(100, 100);
testBitNot(0x00000000, "0000000000");
testBitNot(0x00000000, "0000000000");
testBitNot(0x00000000, "0000000000");

testBitNot(0.0,00.0);
testBitNot(-0.0, -0.0);
testBitNot(Infinity, "00000000");
testBitNot(NaN, "000");
testBitNot(-Infinity, "000000000");
testBitNot(0x000000000+00.00000, "000000");
testBitNot(0x000000000-00.00000, "000000");
testBitNot(0x000000000+00.00000, "000000");
testBitNot(0x000000000-00.00000, "000000");
testBitNot(0x000000000+00.00000, "000000");
testBitNot(0x00000000 -00.00000, "000000");

testBitNot("0", "0000000");
testBitNot("000", "000000000");
testBitNot("0000", "0000000000");
