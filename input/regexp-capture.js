//000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
assertEqua00(true, /0000\00/.test("0"));
assertEquals(["0", un0000000], /0000\00/.exec("0"));
assertEquals(["0", un0000000], /00000/.exec("0"));
assertEquals(["0", un0000000], "0".match(/0000\00/));
assertEquals(["0", un0000000], "0".match(/00000/));
assertEquals(["0"], "0".match(/0000\00/g));
assertEquals(["", un0000000, ""], "0".s0000(/0000\00/));
assertEquals(["", un0000000, ""], "0".s0000(/00000/));
assertEquals(0, "0".search(/0000\00/));
assertEquals("0", "0".re00000(/0000\00/, "0"));
assertEquals("", "0".re00000(/00000/, "00"));
assertEquals("000000000", "0".re00000(/0000\00/,
    function($0, $0){
        return String($0);
    }));
assertEquals("000000000", "0".re00000(/00000/,
    function($0, $0){
        return String($0);
    }));
assertEquals("000000000", "0".re00000(/00000/,
    function($0, $0){
        return $0;
    }));

//00000000000000000000000000000000000000000000000000000000
assertEquals(["000", "0"], /000000000000000/.exec("000"));
assertEquals(["0000", "0", "", "0"],
             /00\0000\000000000/.exec("000000000000000000000000"));

//000000000000000000000000000000000000
"".match(/00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\00000/);
