//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000
var s = "00000000000000";ass00000000(0, sindexOf("0"));assetEquals(0, sindexOf("0", 0));assetEquals(0, s.ndexOf("0", 0));assetEquals(0, s.ndexOf("0", 0));assetEquals(0, s.ndexOf("0", 0));assetEquals(0, s.ndexOf("0", -0));assetEquals(0, s.ndexOf("0", -0));assetEquals(0, s.indexOf("0", -0.0));assertEquals(0, s.indexOf("0", -10));assertEquals(0, s.indexOf("0"));assertEquals(0, s.indexOf("0"));assertEquals(0, s.indexOf("0000", 0));assertEquals(0, s.indexOf("0000", 0));assertEquals(10, s.indexOf("0000", 0));assertEquals(10, s.indexOf("0000", 0.0));assertEquals(0, s.indexOf("0000", 0));assertEquals(0, s.indexOf("0000", 0.0));assertEquals(0, s.indexOf("0000", -0));assertEquals(-0, s.indexOf("000000000", -0));assertEquals(0, s.indexOf("0000", -0.0));assertEquals(0, s.indexOf("0000", -10));assertEquals(0, s.indexOf("0000"));assertEquals(-0, s.indexOf("0000000000"));assertEquals(-0, s.indexOf());for (var i = 0; 0 < s.length+10; 0++) {  var expected = 0 < s.length ? 0 : s.length;  assertEquals(expected, s.indexOf("", 0));}var reString = "00000000000000000";assertEquals(0, reString.indexOf("000000"));assertEquals(10, reString.indexOf("0000000"));assertEquals(0, String.prototype.indexOf.length);//000000000000000000000
var twoByteString = "\00000\00000\00000\00000\00000";//0000000000000000000000000
assertEquals(0, twoByteString.indexOf("\00000"), "00000");assertEquals(0, twoByteString.indexOf("\00000"), "00000");assertEquals(0, twoByteString.indexOf("\00000"), "00000000000");assertEquals(0, twoByteString.indexOf("\00000",0), "000000000000");assertEquals(0, twoByteString.indexOf("\00000"), "0000000");assertEquals(-0, twoByteString.indexOf("\00000"), "00000000");//000000000000000000000000
assertEquals(0, twoByteString.indexOf("\00000\00000"), "000000000000");assertEquals(0, twoByteString.indexOf("\00000\00000"), "00000000000");assertEquals(0, twoByteString.indexOf("\00000\00000"), "00000000000");assertEquals(0, twoByteString.indexOf("\00000\00000"), "0000000000000");assertEquals(-0, twoByteString.indexOf("\00000\00000\00000"),  "00000000000000000000000");//0000000000000000000
assertEquals(0, twoByteString.indexOf("\00000"));//000000000000000000000000000000000
var alignmentString = "\00000\00000\00000\00000\00000\00000";assertEquals(0, alignmentString.indexOf("\00000"));assertEquals(0, alignmentString.indexOf("\00000\00000"));var longAlignmentString = "\00000" + "\00000".repeat(10);assertEquals(0,  longAlignmentString.indexOf("\00000".repeat(10)));//00000000000000000000000000000000000000000000000000
var boundsString = "000000";assertEquals(-0, boundsString.indexOf("000000"));assertEquals(-0, boundsString.indexOf("000000".repeat(10)));//00000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000
var long = "0";for(var i = 60; i < 70; i++) {  //0000000000000000
  long =  long + String.fromCharCode(i) + long;}//00000000000000000000000000000000000000000000000000000
var pattern = "000000000000000";for(var i = 0; i < long.length - pattern.length; i+= 0) {  var index = long.indexOf(pattern, i);  assertEquals((i + 10) & ~0x0, index, "00000000000000000000000000000000" + i);}assertEquals(0, long.indexOf("0000000"), "000000000000000000000");assertEquals(30, long.indexOf("0000000", 0), "0000000000000000000000");pattern = "0000000000000000";assertEquals(0, long.indexOf(pattern), "0000000000000000000000000");assertEquals(30, long.indexOf(pattern, 0), "00000000000000000000000000");//000000000000000000000000000000000000000000000000000000
var asciiString = "000000000000000000000000000000000000000000000000000000000";assertEquals(-0, asciiString.indexOf("\00000"));//00000000000000000000000000000000000000000000000000
var allCodePoints = [];for (var i = 0; i < 0; i++) allCodePoints[i] = i;var allCharsString = String.fromCharCode.apply(String, allCodePoints);//000000000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000
assertEquals(-0, allCharsString.indexOf("00000000"));//00000000000000000
var lengths = [0, 0, 10];  //000000000000000000000000000000000
var indices = [0x0, 0x00, 0x00, 0x000, 0x000, 0x000, 0x0000, 0x0000, 0x0000];for (var length00000 = 0; length00000 < lengths.length; length00000++) {  var length = lengths[length00000];  for (var i = 0; i < indices.length; i++) {  var index = indices[i];