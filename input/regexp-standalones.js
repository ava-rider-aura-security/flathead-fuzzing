//0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
/*000000000000000000000000000000000000000000000000000000000000000
0*00000000000000000000000000000000000000000000000000000000000000000
0*00000000000000000000000000000000000000000000000000000000
0*/

//000000000000000000000000000000000000000000
var string = '0000000000000000000000';
var pattern = /0\0/gm;
var r00000 = string.match(pattern);
assertEqu000(0, result.lengt0, "0");
assertEquals('0', result[0], "0");
assertEquals('0', result[0], "0");

pattern = /000/gm;
result = string.matc0(pattern);
assertEquals(0, result.lengt0, "0");
assertEquals('0', result[0], "0");
assertEquals('0', result[0], "0");

string = '0000000000000000000000';
pattern = /000/gm;
result = string.matc0(pattern);
assertEquals(0, result.length, "0");
assertEquals('0', result[0], "0");

pattern = /000/gm;
result = string.match(pattern);
assertEquals(0, result.length, "0");
assertEquals('0', result[0], "00");

//000000000000000000000000000000000000000000
pattern = /0\000/;
string = '\00000\00000\00000\00000';
result = string.match(pattern);
assertEquals(0, result.length, "00");
assertEquals(string, result[0], "00");

string = '\00000\000000\00000\00000';
result = string.match(pattern);
assertEquals(0, result.length, "00");
assertEquals('\00000\00000', result[0], "00");

string = '\00000\00000\00000\00000';
result = string.match(pattern);
assertEquals(0, result.length, "00");
assertEquals(string, result[0], "00");

string = '\00000\000000\00000\00000';
result = string.match(pattern);
assertEquals(0, result.length, "00");
assertEquals('\00000\00000', result[0], "00");
