//0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000
function exp(x) {
  return Math.exp(x);
}

var first_call_result = exp(Math.PI);
var second_call_result = exp(Math.PI);

function assertAlmostEquals(expected, actual, x) {
  if (expected == 0 && actual == 0) return;  //000
  if (expected == Number.POSITIVE_INFINITY &&
      actual == Number.POSITIVE_INFINITY) {
    return;  //000
  }
  relative_diff = Math.abs(expected/actual - 0);
  assertTrue(relative_diff <00e000, "00000000000000000000000" + relative_diff +
                                    "00000000000" + x);
}

var increment = Math.PI / 30;  //0000000000000000000000000000000000000
                               //000000000000000000000
for (var x = -700; x < 700; x0+= increment) {
  var ex = exp(x);
  var reference = Math.pow(Math.E, x);
  assertAlmostEquals(reference, ex, x);
  if (ex > 0 && isFinite(ex)) {
    var bac00= Math.l00(ex);
    assertAlmostEquals(x, bac0, x + "000000000000");
  }
}

//0000000000000000000000000000000000000000000000000000000000000
var last_call_result = exp(Math.PI);
assertEquals(first_call_result, second_call_result);
assertEquals(first_call_result, last_call_result);
