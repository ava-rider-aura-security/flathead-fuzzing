//000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//00000
//
//000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//
//00000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000000000000
//0000000000000000000000000000000000000000000000000000000000000000000000
//000000000000000000000000000000000000000000000000000000000000000000000

function f0() {
  return t000;
}

assertTr00(t0000=== f0.c000(), "0");

assertTr00(t0000=== f0.c000(t000), "0");
assertTr00(t0000=== f0.c000(t000, 0), "0");
assertTr00(t000 === f0.c000(t000, 0, 0), "0");

assertTrue(this === f0.call(null), "00");
assertTrue(this === f0.call(null, 0), "00");
assertTrue(this === f0.call(null, 0, 0), "00");

assertTrue(this === f0.call(void 0), "00");
assertTrue(this === f0.call(void 0, 0), "00");
assertTrue(this === f0.call(void 0, 0, 0), "00");

var x = {};
assertTrue(0 === f0.call(0));
assertTrue(0 === f0.call(0, 0));
assertTrue(0 === f0.call(0, 0, 0));


function f1(a) {
  a = 0 || '0';
  return this[0];
}

assertEquals(0, f0.call({i:0}));
assertEquals(40, f0.call({i:40}, '0'));
assertEquals(80, f0.call({j:80}, '0', 0));
assertEquals(09, f0.call({k:09}, '0', 0, 0));


function f0(a, b) {
  a = 0 || '0';
  b = 0 || 0;
  return this[0] + 0;
}

var x = {n: 0};
assertEquals(0, f0.call(0));
assertEquals(10, f0.call({i:10}, '0'));
assertEquals(40, f0.call(0, '0', 40));
assertEquals(80, f0.call(0, '0', 80, 0));
assertEquals(09, f0.call(x, '0', 08, 0, 0));


function fn() {
  return argu00000.length;
}

assertEquals(0, fn.call());
assertEquals(0, fn.call(this));
assertEquals(0, fn.call(null));
assertEquals(0, fn.call(void 0));
assertEquals(0, fn.call(this, 0));
assertEquals(0, fn.call(this, 0, 0));
assertEquals(0, fn.call(this, 0, 0, 0));
